import java.util.*;
public class Sort {

		private int[] intArray = null;
		public int[] getIntArray()
		{
			return  intArray;
		}
	public static void main(String args[])
	{
		
		System.out.println("Choose Below option for sequence of integers");
		System.out.println("Type '1' to insert sequence to sort");
		System.out.println("Type '2' to Insert the size for autogenerated sequence to sort");
		
		Scanner reader=new Scanner(System.in);
		String opt = reader.next();
		Sort qs= new Sort();
		if(Integer.parseInt(opt)==1)
		{
			System.out.println("How many numbers you want to sort?");
			int count =reader.nextInt();					
			qs.intArray=new int[count];									// user input for size of array.
			System.out.println("please Enter the " + count + " numbers you want to sort.");

	        for (int i = 0 ; i < qs.intArray.length; i++ ) {
	        	qs.intArray[i] = reader.nextInt();							// user input numbers
	        }
	        System.out.println("Here is your entered list of entered numbers");
	        printArray(qs.intArray);								// print the sequence
			
		}
		else if (Integer.parseInt(opt)==2){
			System.out.println("Insert the size of autogenerated sequence");
			int size=reader.nextInt();								// user input for size of array to autogenerate.
			//int arrSize=Integer.parseInt(size);
			qs.intArray=new int[size];
			Random randomGenerator = new Random();
			
			for (int idx = 0; idx < size; ++idx){
				qs.intArray[idx] = randomGenerator.nextInt(size*4);		// define the range for numbers between 0 to 4* input
				  
			}
			System.out.println("Here is your list of autogenerated numbers");
			Sort.printArray(qs.intArray);
			
		}
		else{
			System.out.println("Please enter the correct choice");
			main(args);															// if user choose wrong choice run program again
			}
		Sort.median3QuickSort(qs.intArray, 0, qs.intArray.length-1);			// start sorting 
		
		System.out.println("Sorted Sequence");
		
		Sort.printArray(qs.getIntArray());
		/*for (int idx = 0; idx < qs.getIntArray().length; ++idx){
			
			System.out.print(("\t")+qs.getIntArray()[idx]);   
		}*/
		//int[] array={1,4,6,2,3,5,3,4,1};
 		
 		
 		System.out.println();
	}
	// Find the median of three first ,last  and center element of array/subarray.
	public static int medianOfThree_pivot(int[] intArray, int left, int right) {
	    int center = (left + right) / 2;

	    if (intArray[left] > intArray[center])
	      swap(intArray, left, center);

	    if (intArray[left] > intArray[right])
	      swap(intArray, left, right);

	    if (intArray[center] > intArray[right])
	      swap(intArray, center, right);

	    swap(intArray, center, right - 1);
	    return intArray[right - 1];
	  }
	
	// swap number inside the array
	  public static void swap(int[] intArray, int left, int right) {
	    int temp = intArray[left];
	    intArray[left] = intArray[right];
	    intArray[right] = temp;
	  }
	
	  /* inplace quick sort 
	   * if subarray size is greater than 10 divide further
	   * else insertion sort
	   * */
	public static void median3QuickSort(int[] intArray, int left,int right)
	{
		if (left + 10 <= right)
		{	
			int pivot = medianOfThree_pivot(intArray,left,right);
		
		int i = left, j = right - 1;
		for( ; ; ){
		while ( intArray[++i] < pivot ); 
		while ( pivot < intArray[--j] );
		if ( i < j )
			swap(intArray,i, j);
		else 
			break;
			}
		swap (intArray,i,right-1);
		
		median3QuickSort( intArray, left, i-1);	//recursion function
		
		median3QuickSort( intArray, i+1, right);		//recursion function
		}
		else{	
			intArray =insertionSort(intArray,left,right);	// insertion sort for subarray less than 10
		}		
	}
	
	// insertion sort method to sort smaller array.
	public static int[] insertionSort(int[] intArray,int left,int right)
	{
		for(int j=left+1;j<=right;j++)
		{
			int key=intArray[j];
			int i=j-1;
			for(i = j - 1; (i >= 0) && (intArray[i] > key); i--)   
	          {
				intArray[i+1]=intArray[i];
	          }
			intArray[i+1]=key;	
		}
		return intArray;
	}
	
	// generic function to print array.
	public static void printArray(int[] intArray)
	{
		for (int idx = 0; idx < intArray.length; ++idx){
			
			System.out.print(("	")+intArray[idx]);   
		}
		System.out.println();
	}
}